generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://kilaeko_owner:npg_6KCb9vrwLPyx@ep-shy-paper-a8ymnliq-pooler.eastus2.azure.neon.tech/kilaeko?sslmode=require"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscriber {
  id               String   @id @default(uuid())
  email            String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  unsubscribeToken String   @unique @default(uuid())
}

model EmailTemplate {
  id        String          @id @default(uuid())
  name      String         @unique
  subject   String
    creator String @default("USER")
  content   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Return {
  id              String       @id @default(cuid())
  orderNumber     Int
  customerEmail   String
  customerName    String?
  status          ReturnStatus @default(PENDING)
  additionalNotes String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  customerId      String
  orderId         String
  totalPaid       Float        @default(0)
  items           ReturnItem[]
}

model ReturnItem {
  id          String   @id @default(uuid())
  returnId    String
  productName String
  variant     String
  reason      String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  return      Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)
}

model Review {
  id            String       @id @default(cuid())
  orderId       String
  orderNumber   Int
  customerEmail String
  customerId    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  customerName  String
  items         ReviewItem[]
}

model ReviewItem {
  id            String    @id @default(uuid())
  reviewId      String
  productName   String
  variant       String
  fitRating     FitRating
  height        String?
  waistSize     String?
  purchasedSize String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  description   String
  rating        Int
  title         String
  review        Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum FitRating {
  RUNS_SMALL
  TRUE_TO_SIZE
  RUNS_LARGE
}
